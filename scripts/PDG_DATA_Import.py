from neo4j import GraphDatabase
import json
import re
import time
import sys
from alive_progress import alive_bar
class PDG_DATACreator:

    def __init__(self, uri):
        self.driver = GraphDatabase.driver(uri,database='pdg')

    def close(self):
        self.driver.close()
    def run_delete(self):
        with self.driver.session() as session:
            delete = session.write_transaction(self._delete)
            return delete
    def run_create(self, node):
        with self.driver.session() as session:
            nodes = session.write_transaction(self._creat_nodes,node)
            return nodes
    def run_link(self, edge):
        with self.driver.session() as session:
            edges = session.write_transaction(self._link_nodes,edge)
            return edges
    @staticmethod
    def _delete(tx):
        query = "MATCH (n) DETACH DELETE n;"
        result = tx.run(query)
        return 'success'
    @staticmethod
    def _creat_nodes(tx,node):
        typeOfNode="PDG_DATA_Node"
        nodeString=json.dumps(node)
        nodeString= re.sub(r'"([^"]+)":', r'\1:', nodeString)
        query="MERGE (a:"+typeOfNode+nodeString+") RETURN  'success' "
        result = tx.run(query)
        return result.single()[0]
    @staticmethod
    def _link_nodes(tx,edge):
        typeOfEdge="Simple"
        if edge["type"]!="":
            typeOfEdge=edge["type"]
        source = edge["source"]
        target = edge["target"] 
        query="MATCH (a:PDG_DATA_Node), (b:PDG_DATA_Node) WHERE a.id =" + str(source) + " AND b.id = " + str(target) +" MERGE (a)-[r:" + typeOfEdge
        if edge["label"]!="":
            query+= "{label:'"+edge["label"]+"'}" 
        query+= "]->(b) RETURN 'success' "
        result = tx.run(query)
        return result.single()[0]


if __name__ == "__main__":
    PDG_DATA = PDG_DATACreator("bolt://neo4j:7687")
    f = open(sys.argv[1],)
    data = json.load(f)
    insertError=0
    insertSucced=0
    linkError=0
    linkSucced=0
    PDG_DATA.run_delete()
    processlength=len(data['nodes'])+len(data['edges'])
    with alive_bar(processlength,title="PFG Import") as bar:
        for i in data['nodes']:
            time.sleep(0.002)
            bar()
            creator = PDG_DATA.run_create(i)
            if creator != "success":
                insertError+=1
            else:
                insertSucced+=1
        
        for j in data['edges']:
            time.sleep(0.002)
            bar()
            linker = PDG_DATA.run_link(j)
            if linker != "success":
                linkError+=1
            else:
                linkSucced+=1
    if insertError>0:
            print(str(insertError)+" Nodes Failed to insert")
    print(str(insertSucced)+" Nodes are inserted")
    if linkError>0:
        print(str(insertError)+" Relations Failed to insert")
    print(str(linkSucced)+" Relations are inserted")
    # Closing file
    f.close()
    PDG_DATA.close()
