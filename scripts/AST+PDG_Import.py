from neo4j import GraphDatabase
import json
import re
import time
import sys
from alive_progress import alive_bar


class MixedCreator:

    def __init__(self, uri):
        self.driver = GraphDatabase.driver(uri,database='astpdg')

    def close(self):
        self.driver.close()
    def run_delete(self):
        with self.driver.session() as session:
            delete = session.write_transaction(self._delete)
            return delete
    def run_create(self, node):
        with self.driver.session() as session:
            nodes = session.write_transaction(self._creat_nodes, node)
            return nodes

    def run_link(self, edge):
        with self.driver.session() as session:
            edges = session.write_transaction(self._link_nodes, edge)
            return edges

    def run_flows(self, node):
        with self.driver.session() as session:
            flows = session.write_transaction(self._flows_nodes, node)
            return flows
    @staticmethod
    def _delete(tx):
        query = "MATCH (n) DETACH DELETE n;"
        result = tx.run(query)
        return 'success'
    @staticmethod
    def _creat_nodes(tx, node):
        typeOfNode = "Statement"
        if node["type"] != "":
            typeOfNode = node["type"].replace('-','_')

        nodeString = json.dumps(node)
        nodeString = re.sub(r'"([^"]+)":', r'\1:', nodeString)
        query = "MERGE (a:" + typeOfNode + nodeString + ") RETURN  'success' "
        result = tx.run(query)
        return result.single()[0]

    @staticmethod
    def _link_nodes(tx, edge):
        typeOfEdge = "GO_TO"
        if edge["label"] != "":
            typeOfEdge = edge["label"].replace('-','_')
        source = edge["source"]
        target = edge["target"]
        query = " MATCH (a), (b) WHERE not a:CFG_Node and NOT a:PDG_DATA_Node and not b:CFG_Node and NOT b:PDG_DATA_Node AND a.id =" + str(
            source) + " AND b.id = " + str(target) + " MERGE (a)-[r:" + typeOfEdge + "]->(b) RETURN 'success' "
        result = tx.run(query)
        return result.single()[0]
    @staticmethod
    def _flows_nodes(tx, node):
        label = node['label']
        method = node['method']
        typeOfEdge = "flows{label:'"+label+"',method:'"+method+"'}"
        source = node["source"]
        target = node["target"]
        query = " MATCH (a), (b) WHERE not a:CFG_Node and NOT a:PDG_DATA_Node and not b:CFG_Node and NOT b:PDG_DATA_Node AND a.id =" + str(
            source) + " AND b.id = " + str(target) + " MERGE (a)-[r:" + typeOfEdge + "]->(b) Return DISTINCT 'success' "
        result = tx.run(query)
        return result.single()[0]

if __name__ == "__main__":
    Mixed = MixedCreator("bolt://neo4j:7687")
    f = open(sys.argv[1], )
    data = json.load(f)
    f.close()
    insertError = 0
    insertSucced = 0
    linkError = 0
    linkSucced = 0
    flowError = 0
    flowSucced = 0
    normalized = [x for x in data['nodes'] if x['label'] != x['normalized']]

    processlength = len(data['nodes']) + len(data['edges'])
    Mixed.run_delete()
    with alive_bar(processlength, title="Mixed Import") as bar:
        for i in data['nodes']:
            i['typeInt'] = ''.join(str(ord(c)) for c in i['type'])
            i['labelInt'] = ''.join(str(ord(c)) for c in i['label'])
            time.sleep(0.002)
            bar()
            creator = Mixed.run_create(i)
            if creator != "success":
                insertError += 1
            else:
                insertSucced += 1

        for j in data['edges']:
            time.sleep(0.002)
            bar()
            linker = Mixed.run_link(j)
            if linker != "success":
                linkError += 1
            else:
                linkSucced += 1

        linked = []
        methods=[x['id'] for x in data['nodes'] if '$METHOD' in x['normalized']]
        methodsName= [x['label'] for x in data['nodes'] if '$METHOD' in x['normalized']]
        count=0
        nodesData=data['nodes']
        currentMethod="ROOT"
        for j in normalized:
            time.sleep(0.002)
            bar()
            if '$METHOD' in j['normalized']:
                linked=[]
                if count+1==len(methods):
                    nodesData = [x for x in data['nodes'] if x['id'] > methods[count]]
                else:
                    nodesData=[x for x in data['nodes'] if x['id']>methods[count] and x['id']<methods[count+1] ]
                currentMethod=methodsName[count]
                count += 1
                continue

            if not j['normalized'] in linked:
                linked.append(j['normalized'])
                tolink = [x['id'] for x in nodesData if j['normalized'] in x['normalized'] and j['id'] != x['id']]
                for k in tolink:
                    nodeToImport={"source":j['id'],"target":k,"label":j['label'],"method":currentMethod}
                    flows=Mixed.run_flows(nodeToImport)
                    if flows != "success":
                        flowError += 1
                    else:
                        flowSucced += 1
        # Closing file
        edgesLine = []
    if insertError > 0:
        print(str(insertError) + " Nodes Failed to insert")
    print(str(insertSucced) + " Nodes are inserted")
    if linkError > 0:
        print(str(insertError) + " Relations Failed to insert")
    print(str(linkSucced) + " Relations are inserted")
    if flowError > 0:
        print(str(flowError) + " Flows Failed to insert")
    print(str(flowSucced) + " Flows are inserted")
    Mixed.close()
