public class GenericClass {
public void genericMethod () throws Throwable{
    /* unserialize data */
    ByteArrayInputStream streamByteArrayInput = null;
    ObjectInputStream streamObjectInput = null;
    try {
        streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
        streamObjectInput = new ObjectInputStream(streamByteArrayInput);
        String data = (String) streamObjectInput.readObject();
        Connection dbConnection = null;
        PreparedStatement sqlStatement = null;
        try {
            /* FIX: Use prepared statement and execute (properly) */
            dbConnection = IO.getDBConnection();
            sqlStatement = dbConnection.prepareStatement("insert into users (status) values ('updated') where name=?");
            sqlStatement.setString(1, data);
            Boolean result = sqlStatement.execute();
            if (result) {
                IO.writeLine("Name, " + data + ", updated successfully");
            } else {
                IO.writeLine("Unable to update records for user: " + data);
            }
        } catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        } finally {
            try {
                if (sqlStatement != null) {
                    sqlStatement.close();
                }
            } catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
            }
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }
            } catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }
        }
    } catch (IOException exceptIO) {
        IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
    } catch (ClassNotFoundException exceptClassNotFound) {
        IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
    } finally {
        /* clean up stream reading objects */
        try {
            if (streamObjectInput != null) {
                streamObjectInput.close();
            }
        } catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
        }
        try {
            if (streamByteArrayInput != null) {
                streamByteArrayInput.close();
            }
        } catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
        }
    }
}
}