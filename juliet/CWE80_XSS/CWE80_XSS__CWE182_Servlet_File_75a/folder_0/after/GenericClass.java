public class GenericClass {
public void genericMethod () throws Throwable{
    String data;
    /* FIX: Use a hardcoded string */
    data = "foo";
    /* serialize data to a byte array */
    ByteArrayOutputStream streamByteArrayOutput = null;
    ObjectOutput outputObject = null;
    try {
        streamByteArrayOutput = new ByteArrayOutputStream();
        outputObject = new ObjectOutputStream(streamByteArrayOutput);
        outputObject.writeObject(data);
        byte[] dataSerialized = streamByteArrayOutput.toByteArray();
        (new CWE80_XSS__CWE182_Servlet_File_75b()).goodG2BSink(dataSerialized, request, response);
    } catch (IOException exceptIO) {
        IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
    } finally {
        /* clean up stream writing objects */
        try {
            if (outputObject != null) {
                outputObject.close();
            }
        } catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
        }
        try {
            if (streamByteArrayOutput != null) {
                streamByteArrayOutput.close();
            }
        } catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
        }
    }
}
}